generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(255)
  slug          String           @unique @db.VarChar(255)
  image         String           @db.VarChar(255)
  price         Int
  ingredients   String?          @db.Text
  categoryId    Int
  category      Category         @relation(fields: [categoryId], references: [id])
  tags          TagsOnProducts[]
  reviews       Review[]
  likes         ProductLikes[]
  cartItems     CartItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Tag {
  id        Int              @id @default(autoincrement())
  name      String           @db.VarChar(255)
  slug      String           @unique @db.VarChar(255)
  products  TagsOnProducts[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TagsOnProducts {
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())

  @@id([productId, tagId])
}

model User {
  id          Int            @id @default(autoincrement())
  email       String         @unique
  phoneNumber String         @unique
  name        String         @db.VarChar(255)
  password    String
  avatar      String         @db.VarChar(255)
  reviews     Review[]
  likes       ProductLikes[]
  cart        Cart?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Review {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  description String?  @db.Text
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, userId], name: "review")
}

model ProductLikes {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId], name: "like")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, cartId], name: "productItem")
}
